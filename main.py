import config
from func import roll, rollV3, rollV4
import logging
from aiogram import Bot, Dispatcher, executor, types
import requests

logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=config.TOKEN)
db = Dispatcher(bot)


@db.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):

    kb = [
        [types.KeyboardButton(text="/help")],
        [types.KeyboardButton(text="/donate")],
        [types.KeyboardButton(text="3-—è —Ä–µ–¥–∞–∫—Ü–∏—è")],
        [types.KeyboardButton(text="4-—è —Ä–µ–¥–∞–∫—Ü–∏—è")],
        [types.KeyboardButton(text="–ü–æ–∏—Å–∫")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.reply(r"–ü—Ä–∏–≤–µ—Ç. –Ø DiceBotWoD. –ù–∞–ø–∏—à–∏—Ç–µ '/roll' –∏–ª–∏ '/r' –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—É–±–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∞ —è –∫–∏–Ω—É –∫—É–±—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: '/r 7 10 6'", reply_markup=keyboard)


@db.message_handler(commands=['dice', 'Dice'])
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@db.message_handler(commands=['donate'])
async def send_donate(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è, —Ç–æ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç:\nyour_card_number_1\nyour_card_number_2\n–°–ø–∞—Å–∏–±–æ!")


@db.message_handler(commands=['search'])
async def search_info(message: types.Message):
    """Function for searching different information about lore and rules"""
    searchQuery = message.text[8:].replace(' ', '+')
    url1 = f"https://wod.fandom.com/ru/wiki/{searchQuery}"
    url2 = f"https://wod.fandom.com/ru/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:%D0%9F%D0%BE%D0%B8%D1%81%D0%BA?query={searchQuery}&scope=internal&navigationSearch=true"
    url3 = f"https://www.google.com/search?q={searchQuery}+world+of+darkness"
    response_url1 = requests.get(url1)
    if not response_url1:
        response_url2 = requests.get(url2)
        if not response_url2:
            response_url3 = requests.get(url3)
            if not response_url3:
                await message.answer('–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É')
            else:
                await message.answer(url3)
        else:
            await message.answer(url2)
    else:
        await message.answer(url1)


@db.message_handler(commands=['Roll', 'roll', 'r'])
async def roll_dice(message: types.Message):
    """Function for base rolling"""
    try:
        await message.answer_dice(emoji="üé≤")
        result = roll(message.text.split(' '))
        await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {}. –£—Å–ø–µ—Ö–æ–≤: {}'.format(result[0], result[1]))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø, —Å–ª–æ–∂–Ω–æ—Å—Ç—å] –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /roll —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")


@db.message_handler(commands=['Roll3r', 'roll3r', 'r3r'])
async def roll_diceV3(message: types.Message):
    """Fuction for rolling dices according to the rules of Revised Edition"""
    try:
        await message.answer_dice(emoji="üé≤")
        result = rollV3(message.text.split(' '))
        await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {}. –£—Å–ø–µ—Ö–æ–≤: {}'.format(result[0], result[1]))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø, —Å–ª–æ–∂–Ω–æ—Å—Ç—å] –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /roll3r —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")


@db.message_handler(commands=['Roll4r', 'roll4r', 'r4r'])
async def roll_diceV4(message: types.Message):
    """Fuction for rolling dices according to the rules of 20th Edition"""
    try:
        await message.answer_dice(emoji="üé≤")
        result = rollV4(message.text.split(' '))
        await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {}. –£—Å–ø–µ—Ö–æ–≤: {}'.format(result[0], result[1]))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø, —Å–ª–æ–∂–Ω–æ—Å—Ç—å] –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /roll4r —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")


@db.message_handler()
async def version(message: types.Message):
    if message.text == '3-—è —Ä–µ–¥–∞–∫—Ü–∏—è':
        await message.answer("–ß—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –∫—É–±—ã –ø–æ 3-–π —Ä–µ–¥–∞–∫—Ü–∏–∏ (Revised), –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/roll3r' –∏–ª–∏ '/r3r'")
    elif message.text == '4-—è —Ä–µ–¥–∞–∫—Ü–∏—è':
        await message.answer("–ß—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –∫—É–±—ã –ø–æ 4-–π —Ä–µ–¥–∞–∫—Ü–∏–∏ (20th), –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/roll4r' –∏–ª–∏ '/r4r'")
    elif message.text == '–ü–æ–∏—Å–∫':
        await message.answer("–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/search' –∏ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")


if __name__ == '__main__':
    executor.start_polling(db, skip_updates=True)